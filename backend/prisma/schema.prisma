// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  username   String       @unique
  password   String?
  firstName  String
  lastName   String?
  avatar     String?
  bio        String?
  rating     Int          @default(0)
  points     Int          @default(0)
  streak     Int          @default(0)
  lastSolved DateTime?
  isVerified Boolean      @default(false)
  provider   AuthProvider @default(LOCAL)
  providerId String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  accounts              Account[]
  problems              Problem[]
  submissions           Submission[]
  contests              Contest[]
  contestParticipations ContestParticipation[]
  discussions           Discussion[]
  comments              Comment[]
  votes                 Vote[]
  solutions             Solution[]
  bookmarks             Bookmark[]
  followedBy            Follow[]               @relation("Following")
  following             Follow[]               @relation("Follower")

  @@index([rating])
  @@index([points])
  @@index([provider, providerId])
  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Problem {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String     @db.Text
  difficulty  Difficulty
  tags        String[]   @default([])
  constraints String?    @db.Text
  hints       String[]   @default([])

  totalSubmissions    Int   @default(0)
  acceptedSubmissions Int   @default(0)
  acceptanceRate      Float @default(0)

  createdBy   String
  isPublished Boolean @default(false)
  isPremium   Boolean @default(false)

  companies String[] @default([])
  frequency Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator         User             @relation(fields: [createdBy], references: [id])
  testCases       TestCase[]
  submissions     Submission[]
  solutions       Solution[]
  discussions     Discussion[]
  bookmarks       Bookmark[]
  contestProblems ContestProblem[]

  @@index([difficulty])
  @@index([createdBy])
  @@index([isPremium])
  @@index([acceptanceRate])
  @@map("problems")
}

model TestCase {
  id             String  @id @default(cuid())
  problemId      String
  input          String  @db.Text
  expectedOutput String  @db.Text
  isHidden       Boolean @default(false)
  explanation    String?

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([problemId])
  @@map("test_cases")
}

model Submission {
  id              String           @id @default(cuid())
  userId          String
  problemId       String
  code            String           @db.Text
  language        String
  status          SubmissionStatus
  runtime         Int?
  memory          Int?
  testCasesPassed Int              @default(0)
  totalTestCases  Int              @default(0)
  errorMessage    String?          @db.Text
  judge0Token     String?

  submittedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@index([userId])
  @@index([problemId])
  @@index([status])
  @@index([submittedAt])
  @@map("submissions")
}

model Contest {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  createdBy   String
  type        ContestType @default(PUBLIC)

  startTime DateTime
  endTime   DateTime
  duration  Int

  maxParticipants Int?
  isRated         Boolean @default(true)
  penalty         Int     @default(5) // penalty minutes for wrong submission

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator        User                   @relation(fields: [createdBy], references: [id])
  problems       ContestProblem[]
  participations ContestParticipation[]

  @@index([createdBy])
  @@index([startTime])
  @@index([type])
  @@map("contests")
}

model ContestProblem {
  id        String @id @default(cuid())
  contestId String
  problemId String
  points    Int    @default(100)
  order     Int

  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id])

  @@unique([contestId, problemId])
  @@unique([contestId, order])
  @@index([contestId])
  @@map("contest_problems")
}

model ContestParticipation {
  id           String @id @default(cuid())
  userId       String
  contestId    String
  score        Int    @default(0)
  penalty      Int    @default(0)
  rank         Int?
  ratingChange Int    @default(0)

  joinedAt   DateTime  @default(now())
  finishedAt DateTime?

  user        User                @relation(fields: [userId], references: [id])
  contest     Contest             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  submissions ContestSubmission[]

  @@unique([userId, contestId])
  @@index([contestId])
  @@index([score])
  @@map("contest_participations")
}

model ContestSubmission {
  id              String           @id @default(cuid())
  participationId String
  problemId       String
  code            String           @db.Text
  language        String
  status          SubmissionStatus
  runtime         Int?
  memory          Int?
  points          Int              @default(0)
  penalty         Int              @default(0)

  submittedAt DateTime @default(now())

  participation ContestParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)

  @@index([participationId])
  @@index([submittedAt])
  @@map("contest_submissions")
}

model Discussion {
  id        String         @id @default(cuid())
  title     String
  content   String         @db.Text
  authorId  String
  problemId String?
  type      DiscussionType @default(GENERAL)

  upvotes   Int     @default(0)
  downvotes Int     @default(0)
  isPinned  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  problem  Problem?  @relation(fields: [problemId], references: [id])
  comments Comment[]
  votes    Vote[]

  @@index([authorId])
  @@index([problemId])
  @@index([type])
  @@index([createdAt])
  @@map("discussions")
}

model Comment {
  id           String  @id @default(cuid())
  content      String  @db.Text
  authorId     String
  discussionId String
  parentId     String?

  upvotes   Int @default(0)
  downvotes Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author     User       @relation(fields: [authorId], references: [id])
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]  @relation("CommentReplies")
  votes      Vote[]

  @@index([authorId])
  @@index([discussionId])
  @@index([parentId])
  @@map("comments")
}

model Vote {
  id           String   @id @default(cuid())
  userId       String
  type         VoteType
  discussionId String?
  commentId    String?

  createdAt DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id])
  discussion Discussion? @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  comment    Comment?    @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, discussionId])
  @@unique([userId, commentId])
  @@index([userId])
  @@map("votes")
}

model Solution {
  id         String  @id @default(cuid())
  title      String
  content    String  @db.Text
  code       String  @db.Text
  language   String
  complexity String?
  approach   String?

  authorId   String
  problemId  String
  isOfficial Boolean @default(false)

  upvotes   Int @default(0)
  downvotes Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  User    @relation(fields: [authorId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@index([authorId])
  @@index([problemId])
  @@index([isOfficial])
  @@map("solutions")
}

model Bookmark {
  id        String @id @default(cuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@unique([userId, problemId])
  @@index([userId])
  @@map("bookmarks")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  createdAt DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

enum AuthProvider {
  LOCAL
  GOOGLE
  GITHUB
  DISCORD
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  INTERNAL_ERROR
}

enum ContestType {
  PUBLIC
  PRIVATE
  COMPANY
}

enum DiscussionType {
  GENERAL
  SOLUTION
  HINT
  BUG_REPORT
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
